rules_version = '2';

//
// Rule Reference:
// https://firebase.google.com/docs/reference/rules
//
service cloud.firestore {
  match /databases/{database}/documents {

    // = = = = = = = = = = = = = = =
    // GLOBAL SWITCHES
    function global_system_on() {
      return true;
    }

    function global_read_on() {
      return true;
    }

    function global_write_on() {
      return true;
    }

    function user_signed_in() {
      return request.auth.uid != null;
    }

    // - - - - - - - - - - - - - - -
    
    match /snippets/{snippetId} {
      // = = = = = = = = = = = = = = =
      // VALIDATION RULES

      // Field: *
      // Rules:
      //        - the count of fields must be 5
      //        - the content fields must appeared
      //        - one of the timestamp must be appeared
      function validate_snippet_keys_for_create() {
        return request.resource.data.keys().size() == 6 &&
                request.resource.data.keys().hasAll(['userId', 'title', 'mode', 'code', 'note', 'createdAt']);
      }

      function validate_snippet_keys_for_update() {
        return request.resource.data.keys().size() == 7 &&
                request.resource.data.keys().hasAll(['userId', 'title', 'mode', 'code', 'note', 'createdAt', 'updatedAt']);
      }
      
      // Field: mode
      // Rules:
      //        - must be a known mode id
      function validate_snippet_field_mode() {
        return request.resource.data.mode.matches('javascript|scala|ruby');
      }

      // Field: title
      // Rules: 
      //       - not empty
      //       - less than 1500 bytes (Maximum size of an indexed field value)
      function validate_snippet_field_title() {
        return request.resource.data.title != null &&
                request.resource.data.title.size() > 0 && 
                request.resource.data.title.size() < 1500;
      }
      
      // Field: code
      // Rules:
      //        - not empty
      //        - less than 10000 bytes (Good for most of cases, adjust it if needed)
      function validate_snippet_field_code() {
        return request.resource.data.code == null ||
                request.resource.data.code.size() < 10000;
      }
      

      // Field: note
      // Rules:
      //        - less than 10000 bytes (Good for most of cases, adjust it if needed)
      function validate_snippet_field_note() {
        return request.resource.data.note == null ||
                request.resource.data.note.size() < 10000;
      }

      // Field: userId
      // Rules:
      //        - signed in user
      //        - is current userId
      function validate_snippet_field_user_id() {
        return request.resource.data.userId != null &&
                request.auth.uid == request.resource.data.userId;
      }

      // Field: createdAt
      // Rules:
      //        - is server timestamp
      function validate_snippet_field_create_time() {
        return request.time == request.resource.data.createdAt;
      }

      function created_time_not_changed() {
        return request.resource.data.createdAt == resource.data.createdAt;
      }

      // Field: createdAt
      // Rules:
      //        - is server timestamp
      function validate_snippet_field_update_time() {
        return request.time == request.resource.data.updatedAt;
      }

      function is_owner() {
        return request.auth.uid == resource.data.userId
      }

      function user_id_not_changed() {
        return request.resource.data.userId == resource.data.userId;
      }

      function limit_query_size() {
        return request.query.limit <= 100;
      }

      // = = = = = = = = = = = = = = =
      // COMBINE RULES

      // Cond: get a list of documents
      function allow_snippet_list() {
        return global_system_on() && 
                global_read_on() &&
                limit_query_size();
      }

      // Cond: get one document
      function allow_snippet_get() {
        return global_system_on() &&
                global_read_on();
      }

      // Cond: create a new document
      function allow_snippet_create() {
        return global_system_on() && 
                global_write_on() &&
                // permission
                user_signed_in() &&
                // fields
                validate_snippet_keys_for_create() &&
                validate_snippet_field_user_id() &&
                validate_snippet_field_mode() &&
                validate_snippet_field_title() &&
                validate_snippet_field_note() &&
                validate_snippet_field_code() &&
                validate_snippet_field_create_time();
      }

      // Cond: update one exists documents
      function allow_snippet_update() {
        return global_system_on() &&
                global_write_on() &&
                // permission
                user_signed_in() &&
                is_owner() &&
                created_time_not_changed() &&
                user_id_not_changed() &&
                // fields
                validate_snippet_keys_for_update() &&
                validate_snippet_field_mode() &&
                validate_snippet_field_title() &&
                validate_snippet_field_note() &&
                validate_snippet_field_code() &&
                validate_snippet_field_update_time();
      }

      // Cond: delete one documents
      function allow_snippet_delete() {
        return global_system_on() && 
                global_write_on() &&
                // permission
                user_signed_in();
      }
      // - - - - - - - - - - - - - - -

      // = = = = = = = = = = = = = = =
      // APPLY COMBINED RULES
      // read
      allow get: if allow_snippet_get();
      allow list: if allow_snippet_list();
      // write
      allow create: if allow_snippet_create();
      allow delete: if allow_snippet_delete();
      allow update: if allow_snippet_update();
      // - - - - - - - - - - - - - - -
       
      match /marks/{markId} {
        allow read, write;
      }

    }
  }
}